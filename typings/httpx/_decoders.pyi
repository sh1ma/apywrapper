"""
This type stub file was generated by pyright.
"""

import typing
from ._models import Request

"""
Handlers for Content-Encoding.

See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding
"""
if typing.TYPE_CHECKING:
    ...
class Decoder:
    def __init__(self, request: Request) -> None:
        ...
    
    def decode(self, data: bytes) -> bytes:
        ...
    
    def flush(self) -> bytes:
        ...
    


class IdentityDecoder(Decoder):
    """
    Handle unencoded data.
    """
    def decode(self, data: bytes) -> bytes:
        ...
    
    def flush(self) -> bytes:
        ...
    


class DeflateDecoder(Decoder):
    """
    Handle 'deflate' decoding.

    See: https://stackoverflow.com/questions/1838699
    """
    def __init__(self, request: Request) -> None:
        ...
    
    def decode(self, data: bytes) -> bytes:
        ...
    
    def flush(self) -> bytes:
        ...
    


class GZipDecoder(Decoder):
    """
    Handle 'gzip' decoding.

    See: https://stackoverflow.com/questions/1838699
    """
    def __init__(self, request: Request) -> None:
        ...
    
    def decode(self, data: bytes) -> bytes:
        ...
    
    def flush(self) -> bytes:
        ...
    


class BrotliDecoder(Decoder):
    """
    Handle 'brotli' decoding.

    Requires `pip install brotlipy`. See: https://brotlipy.readthedocs.io/
        or   `pip install brotli`. See https://github.com/google/brotli
    Supports both 'brotlipy' and 'Brotli' packages since they share an import
    name. The top branches are for 'brotlipy' and bottom branches for 'Brotli'
    """
    def __init__(self, request: Request) -> None:
        ...
    
    def decode(self, data: bytes) -> bytes:
        ...
    
    def flush(self) -> bytes:
        ...
    


class MultiDecoder(Decoder):
    """
    Handle the case where multiple encodings have been applied.
    """
    def __init__(self, children: typing.Sequence[Decoder]) -> None:
        """
        'children' should be a sequence of decoders in the order in which
        each was applied.
        """
        ...
    
    def decode(self, data: bytes) -> bytes:
        ...
    
    def flush(self) -> bytes:
        ...
    


class TextDecoder:
    """
    Handles incrementally decoding bytes into text
    """
    def __init__(self, request: Request, encoding: typing.Optional[str] = ...) -> None:
        ...
    
    def decode(self, data: bytes) -> str:
        ...
    
    def flush(self) -> str:
        ...
    


class LineDecoder:
    """
    Handles incrementally reading lines from text.

    Uses universal line decoding, supporting any of `\n`, `\r`, or `\r\n`
    as line endings, normalizing to `\n`.
    """
    def __init__(self) -> None:
        ...
    
    def decode(self, text: str) -> typing.List[str]:
        ...
    
    def flush(self) -> typing.List[str]:
        ...
    


SUPPORTED_DECODERS = { "identity": IdentityDecoder,"gzip": GZipDecoder,"deflate": DeflateDecoder,"br": BrotliDecoder }
if brotli is None:
    ...
