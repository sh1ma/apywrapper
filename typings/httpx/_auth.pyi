"""
This type stub file was generated by pyright.
"""

import typing
from ._models import Request, Response

class Auth:
    """
    Base class for all authentication schemes.

    To implement a custom authentication scheme, subclass `Auth` and override
    the `.auth_flow()` method.
    """
    requires_request_body = ...
    requires_response_body = ...
    def auth_flow(self, request: Request) -> typing.Generator[Request, Response, None]:
        """
        Execute the authentication flow.

        To dispatch a request, `yield` it:

        ```
        yield request
        ```

        The client will `.send()` the response back into the flow generator. You can
        access it like so:

        ```
        response = yield request
        ```

        A `return` (or reaching the end of the generator) will result in the
        client returning the last response obtained from the server.

        You can dispatch as many requests as is necessary.
        """
        ...
    


class FunctionAuth(Auth):
    """
    Allows the 'auth' argument to be passed as a simple callable function,
    that takes the request, and returns a new, modified request.
    """
    def __init__(self, func: typing.Callable[[Request], Request]) -> None:
        ...
    
    def auth_flow(self, request: Request) -> typing.Generator[Request, Response, None]:
        ...
    


class BasicAuth(Auth):
    """
    Allows the 'auth' argument to be passed as a (username, password) pair,
    and uses HTTP Basic authentication.
    """
    def __init__(self, username: typing.Union[str, bytes], password: typing.Union[str, bytes]) -> None:
        ...
    
    def auth_flow(self, request: Request) -> typing.Generator[Request, Response, None]:
        ...
    


class DigestAuth(Auth):
    def __init__(self, username: typing.Union[str, bytes], password: typing.Union[str, bytes]) -> None:
        ...
    
    def auth_flow(self, request: Request) -> typing.Generator[Request, Response, None]:
        ...
    


class _DigestAuthChallenge:
    def __init__(self, realm: bytes, nonce: bytes, algorithm: str, opaque: typing.Optional[bytes] = ..., qop: typing.Optional[bytes] = ...) -> None:
        ...
    


