"""
This type stub file was generated by pyright.
"""

import typing
import httpcore

class WSGITransport(httpcore.SyncHTTPTransport):
    """
    A custom transport that handles sending requests directly to an WSGI app.
    The simplest way to use this functionality is to use the `app` argument.

    ```
    client = httpx.Client(app=app)
    ```

    Alternatively, you can setup the transport instance explicitly.
    This allows you to include any additional configuration arguments specific
    to the WSGITransport class:

    ```
    transport = httpx.WSGITransport(
        app=app,
        script_name="/submount",
        remote_addr="1.2.3.4"
    )
    client = httpx.Client(transport=transport)
    ```

    Arguments:

    * `app` - The ASGI application.
    * `raise_app_exceptions` - Boolean indicating if exceptions in the application
       should be raised. Default to `True`. Can be set to `False` for use cases
       such as testing the content of a client 500 response.
    * `script_name` - The root path on which the ASGI application should be mounted.
    * `remote_addr` - A string indicating the client IP of incoming requests.
    ```
    """
    def __init__(self, app: typing.Callable, raise_app_exceptions: bool = ..., script_name: str = ..., remote_addr: str = ...) -> None:
        ...
    
    def request(self, method: bytes, url: typing.Tuple[bytes, bytes, typing.Optional[int], bytes], headers: typing.List[typing.Tuple[bytes, bytes]] = ..., stream: httpcore.SyncByteStream = ..., timeout: typing.Mapping[str, typing.Optional[float]] = ...) -> typing.Tuple[bytes, int, bytes, typing.List[typing.Tuple[bytes, bytes]], httpcore.SyncByteStream]:
        ...
    


