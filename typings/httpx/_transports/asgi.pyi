"""
This type stub file was generated by pyright.
"""

import httpcore
import asyncio
import trio
from typing import Callable, List, Mapping, Optional, TYPE_CHECKING, Tuple, Union

if TYPE_CHECKING:
    Event = Union[asyncio.Event, trio.Event]
def create_event() -> Event:
    ...

class ASGITransport(httpcore.AsyncHTTPTransport):
    """
    A custom AsyncTransport that handles sending requests directly to an ASGI app.
    The simplest way to use this functionality is to use the `app` argument.

    ```
    client = httpx.AsyncClient(app=app)
    ```

    Alternatively, you can setup the transport instance explicitly.
    This allows you to include any additional configuration arguments specific
    to the ASGITransport class:

    ```
    transport = httpx.ASGITransport(
        app=app,
        root_path="/submount",
        client=("1.2.3.4", 123)
    )
    client = httpx.AsyncClient(transport=transport)
    ```

    Arguments:

    * `app` - The ASGI application.
    * `raise_app_exceptions` - Boolean indicating if exceptions in the application
       should be raised. Default to `True`. Can be set to `False` for use cases
       such as testing the content of a client 500 response.
    * `root_path` - The root path on which the ASGI application should be mounted.
    * `client` - A two-tuple indicating the client IP and port of incoming requests.
    ```
    """
    def __init__(self, app: Callable, raise_app_exceptions: bool = ..., root_path: str = ..., client: Tuple[str, int] = ...) -> None:
        ...
    
    async def request(self, method: bytes, url: Tuple[bytes, bytes, Optional[int], bytes], headers: List[Tuple[bytes, bytes]] = ..., stream: httpcore.AsyncByteStream = ..., timeout: Mapping[str, Optional[float]] = ...) -> Tuple[bytes, int, bytes, List[Tuple[bytes, bytes]], httpcore.AsyncByteStream]:
        ...
    


