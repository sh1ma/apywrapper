"""
This type stub file was generated by pyright.
"""

import typing
import httpcore
from types import TracebackType
from ._config import Limits, Timeout, UnsetType
from ._models import Cookies, Headers, QueryParams, Request, Response, URL
from ._types import AuthTypes, CertTypes, CookieTypes, HeaderTypes, ProxiesTypes, QueryParamTypes, RequestData, RequestFiles, TimeoutTypes, URLTypes, VerifyTypes
from ._utils import get_logger

logger = get_logger(__name__)
KEEPALIVE_EXPIRY = 5
class BaseClient:
    def __init__(self, *, auth: AuthTypes = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., timeout: TimeoutTypes = ..., max_redirects: int = ..., base_url: URLTypes = ..., trust_env: bool = ...) -> None:
        ...
    
    @property
    def trust_env(self) -> bool:
        ...
    
    @property
    def timeout(self) -> Timeout:
        ...
    
    @timeout.setter
    def timeout(self, timeout: TimeoutTypes) -> None:
        ...
    
    @property
    def base_url(self) -> URL:
        """
        Base URL to use when sending requests with relative URLs.
        """
        ...
    
    @base_url.setter
    def base_url(self, url: URLTypes) -> None:
        ...
    
    @property
    def headers(self) -> Headers:
        """
        HTTP headers to include when sending requests.
        """
        ...
    
    @headers.setter
    def headers(self, headers: HeaderTypes) -> None:
        ...
    
    @property
    def cookies(self) -> Cookies:
        """
        Cookie values to include when sending requests.
        """
        ...
    
    @cookies.setter
    def cookies(self, cookies: CookieTypes) -> None:
        ...
    
    @property
    def params(self) -> QueryParams:
        """
        Query parameters to include in the URL when sending requests.
        """
        ...
    
    @params.setter
    def params(self, params: QueryParamTypes) -> None:
        ...
    
    def stream(self, method: str, url: URLTypes, *, data: RequestData = ..., files: RequestFiles = ..., json: typing.Any = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> StreamContextManager:
        ...
    
    def build_request(self, method: str, url: URLTypes, *, data: RequestData = ..., files: RequestFiles = ..., json: typing.Any = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ...) -> Request:
        """
        Build and return a request instance.

        * The `params`, `headers` and `cookies` arguments
        are merged with any values set on the client.
        * The `url` argument is merged with any `base_url` set on the client.

        See also: [Request instances][0]

        [0]: /advanced/#request-instances
        """
        ...
    


class Client(BaseClient):
    """
    An HTTP client, with connection pooling, HTTP/2, redirects, cookie persistence, etc.

    Usage:

    ```python
    >>> client = httpx.Client()
    >>> response = client.get('https://example.org')
    ```

    **Parameters:**

    * **auth** - *(optional)* An authentication class to use when sending
    requests.
    * **params** - *(optional)* Query parameters to include in request URLs, as
    a string, dictionary, or list of two-tuples.
    * **headers** - *(optional)* Dictionary of HTTP headers to include when
    sending requests.
    * **cookies** - *(optional)* Dictionary of Cookie items to include when
    sending requests.
    * **verify** - *(optional)* SSL certificates (a.k.a CA bundle) used to
    verify the identity of requested hosts. Either `True` (default CA bundle),
    a path to an SSL certificate file, or `False` (disable verification).
    * **cert** - *(optional)* An SSL certificate used by the requested host
    to authenticate the client. Either a path to an SSL certificate file, or
    two-tuple of (certificate file, key file), or a three-tuple of (certificate
    file, key file, password).
    * **proxies** - *(optional)* A dictionary mapping HTTP protocols to proxy
    URLs.
    * **timeout** - *(optional)* The timeout configuration to use when sending
    requests.
    * **limits** - *(optional)* The limits configuration to use.
    * **max_redirects** - *(optional)* The maximum number of redirect responses
    that should be followed.
    * **base_url** - *(optional)* A URL to use as the base when building
    request URLs.
    * **transport** - *(optional)* A transport class to use for sending requests
    over the network.
    * **app** - *(optional)* An WSGI application to send requests to,
    rather than sending actual network requests.
    * **trust_env** - *(optional)* Enables or disables usage of environment
    variables for configuration.
    """
    def __init__(self, *, auth: AuthTypes = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., verify: VerifyTypes = ..., cert: CertTypes = ..., http2: bool = ..., proxies: ProxiesTypes = ..., timeout: TimeoutTypes = ..., limits: Limits = ..., pool_limits: Limits = ..., max_redirects: int = ..., base_url: URLTypes = ..., transport: httpcore.SyncHTTPTransport = ..., app: typing.Callable = ..., trust_env: bool = ...) -> None:
        ...
    
    def request(self, method: str, url: URLTypes, *, data: RequestData = ..., files: RequestFiles = ..., json: typing.Any = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Build and send a request.

        Equivalent to:

        ```python
        request = client.build_request(...)
        response = client.send(request, ...)
        ```

        See `Client.build_request()`, `Client.send()` and
        [Merging of configuration][0] for how the various parameters
        are merged with client-level configuration.

        [0]: /advanced/#merging-of-configuration
        """
        ...
    
    def send(self, request: Request, *, stream: bool = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a request.

        The request is sent as-is, unmodified.

        Typically you'll want to build one with `Client.build_request()`
        so that any client-level configuration is merged into the request,
        but passing an explicit `httpx.Request()` is supported as well.

        See also: [Request instances][0]

        [0]: /advanced/#request-instances
        """
        ...
    
    def get(self, url: URLTypes, *, params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a `GET` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    def options(self, url: URLTypes, *, params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send an `OPTIONS` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    def head(self, url: URLTypes, *, params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a `HEAD` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    def post(self, url: URLTypes, *, data: RequestData = ..., files: RequestFiles = ..., json: typing.Any = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a `POST` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    def put(self, url: URLTypes, *, data: RequestData = ..., files: RequestFiles = ..., json: typing.Any = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a `PUT` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    def patch(self, url: URLTypes, *, data: RequestData = ..., files: RequestFiles = ..., json: typing.Any = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a `PATCH` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    def delete(self, url: URLTypes, *, params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a `DELETE` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    def close(self) -> None:
        """
        Close transport and proxies.
        """
        ...
    
    def __enter__(self) -> Client:
        ...
    
    def __exit__(self, exc_type: typing.Type[BaseException] = ..., exc_value: BaseException = ..., traceback: TracebackType = ...) -> None:
        ...
    


class AsyncClient(BaseClient):
    """
    An asynchronous HTTP client, with connection pooling, HTTP/2, redirects,
    cookie persistence, etc.

    Usage:

    ```python
    >>> async with httpx.AsyncClient() as client:
    >>>     response = await client.get('https://example.org')
    ```

    **Parameters:**

    * **auth** - *(optional)* An authentication class to use when sending
    requests.
    * **params** - *(optional)* Query parameters to include in request URLs, as
    a string, dictionary, or list of two-tuples.
    * **headers** - *(optional)* Dictionary of HTTP headers to include when
    sending requests.
    * **cookies** - *(optional)* Dictionary of Cookie items to include when
    sending requests.
    * **verify** - *(optional)* SSL certificates (a.k.a CA bundle) used to
    verify the identity of requested hosts. Either `True` (default CA bundle),
    a path to an SSL certificate file, or `False` (disable verification).
    * **cert** - *(optional)* An SSL certificate used by the requested host
    to authenticate the client. Either a path to an SSL certificate file, or
    two-tuple of (certificate file, key file), or a three-tuple of (certificate
    file, key file, password).
    * **http2** - *(optional)* A boolean indicating if HTTP/2 support should be
    enabled. Defaults to `False`.
    * **proxies** - *(optional)* A dictionary mapping HTTP protocols to proxy
    URLs.
    * **timeout** - *(optional)* The timeout configuration to use when sending
    requests.
    * **limits** - *(optional)* The limits configuration to use.
    * **max_redirects** - *(optional)* The maximum number of redirect responses
    that should be followed.
    * **base_url** - *(optional)* A URL to use as the base when building
    request URLs.
    * **transport** - *(optional)* A transport class to use for sending requests
    over the network.
    * **app** - *(optional)* An ASGI application to send requests to,
    rather than sending actual network requests.
    * **trust_env** - *(optional)* Enables or disables usage of environment
    variables for configuration.
    """
    def __init__(self, *, auth: AuthTypes = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., verify: VerifyTypes = ..., cert: CertTypes = ..., http2: bool = ..., proxies: ProxiesTypes = ..., timeout: TimeoutTypes = ..., limits: Limits = ..., pool_limits: Limits = ..., max_redirects: int = ..., base_url: URLTypes = ..., transport: httpcore.AsyncHTTPTransport = ..., app: typing.Callable = ..., trust_env: bool = ...) -> None:
        ...
    
    async def request(self, method: str, url: URLTypes, *, data: RequestData = ..., files: RequestFiles = ..., json: typing.Any = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Build and send a request.

        Equivalent to:

        ```python
        request = client.build_request(...)
        response = client.send(request, ...)
        ```

        See `AsyncClient.build_request()`, `AsyncClient.send()`
        and [Merging of configuration][0] for how the various parameters
        are merged with client-level configuration.

        [0]: /advanced/#merging-of-configuration
        """
        ...
    
    async def send(self, request: Request, *, stream: bool = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a request.

        The request is sent as-is, unmodified.

        Typically you'll want to build one with `AsyncClient.build_request()`
        so that any client-level configuration is merged into the request,
        but passing an explicit `httpx.Request()` is supported as well.

        See also: [Request instances][0]

        [0]: /advanced/#request-instances
        """
        ...
    
    async def get(self, url: URLTypes, *, params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a `GET` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    async def options(self, url: URLTypes, *, params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send an `OPTIONS` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    async def head(self, url: URLTypes, *, params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a `HEAD` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    async def post(self, url: URLTypes, *, data: RequestData = ..., files: RequestFiles = ..., json: typing.Any = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a `POST` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    async def put(self, url: URLTypes, *, data: RequestData = ..., files: RequestFiles = ..., json: typing.Any = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a `PUT` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    async def patch(self, url: URLTypes, *, data: RequestData = ..., files: RequestFiles = ..., json: typing.Any = ..., params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a `PATCH` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    async def delete(self, url: URLTypes, *, params: QueryParamTypes = ..., headers: HeaderTypes = ..., cookies: CookieTypes = ..., auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ...) -> Response:
        """
        Send a `DELETE` request.

        **Parameters**: See `httpx.request`.
        """
        ...
    
    async def aclose(self) -> None:
        """
        Close transport and proxies.
        """
        ...
    
    async def __aenter__(self) -> AsyncClient:
        ...
    
    async def __aexit__(self, exc_type: typing.Type[BaseException] = ..., exc_value: BaseException = ..., traceback: TracebackType = ...) -> None:
        ...
    


class StreamContextManager:
    def __init__(self, client: BaseClient, request: Request, *, auth: AuthTypes = ..., allow_redirects: bool = ..., timeout: typing.Union[TimeoutTypes, UnsetType] = ..., close_client: bool = ...) -> None:
        ...
    
    def __enter__(self) -> Response:
        ...
    
    def __exit__(self, exc_type: typing.Type[BaseException] = ..., exc_value: BaseException = ..., traceback: TracebackType = ...) -> None:
        ...
    
    async def __aenter__(self) -> Response:
        ...
    
    async def __aexit__(self, exc_type: typing.Type[BaseException] = ..., exc_value: BaseException = ..., traceback: TracebackType = ...) -> None:
        ...
    


