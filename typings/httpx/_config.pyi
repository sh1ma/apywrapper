"""
This type stub file was generated by pyright.
"""

import ssl
import typing
from ._types import CertTypes, HeaderTypes, TimeoutTypes, URLTypes, VerifyTypes
from ._utils import get_logger

DEFAULT_CIPHERS = ":".join(["ECDHE+AESGCM", "ECDHE+CHACHA20", "DHE+AESGCM", "DHE+CHACHA20", "ECDH+AESGCM", "DH+AESGCM", "ECDH+AES", "DH+AES", "RSA+AESGCM", "RSA+AES", "!aNULL", "!eNULL", "!MD5", "!DSS"])
logger = get_logger(__name__)
class UnsetType:
    ...


UNSET = UnsetType()
def create_ssl_context(cert: CertTypes = ..., verify: VerifyTypes = ..., trust_env: bool = ..., http2: bool = ...) -> ssl.SSLContext:
    ...

class SSLConfig:
    """
    SSL Configuration.
    """
    DEFAULT_CA_BUNDLE_PATH = ...
    def __init__(self, *, cert: CertTypes = ..., verify: VerifyTypes = ..., trust_env: bool = ..., http2: bool = ...) -> None:
        ...
    
    def load_ssl_context(self) -> ssl.SSLContext:
        ...
    
    def load_ssl_context_no_verify(self) -> ssl.SSLContext:
        """
        Return an SSL context for unverified connections.
        """
        ...
    
    def load_ssl_context_verify(self) -> ssl.SSLContext:
        """
        Return an SSL context for verified connections.
        """
        ...
    


class Timeout:
    """
    Timeout configuration.

    **Usage**:

    Timeout(None)               # No timeouts.
    Timeout(5.0)                # 5s timeout on all operations.
    Timeout(None, connect=5.0)  # 5s timeout on connect, no other timeouts.
    Timeout(5.0, connect=10.0)  # 10s timeout on connect. 5s timeout elsewhere.
    Timeout(5.0, pool=None)     # No timeout on acquiring connection from pool.
                                # 5s timeout elsewhere.
    """
    def __init__(self, timeout: typing.Union[TimeoutTypes, UnsetType] = ..., *, connect: typing.Union[None, float, UnsetType] = ..., read: typing.Union[None, float, UnsetType] = ..., write: typing.Union[None, float, UnsetType] = ..., pool: typing.Union[None, float, UnsetType] = ..., connect_timeout: typing.Union[None, float, UnsetType] = ..., read_timeout: typing.Union[None, float, UnsetType] = ..., write_timeout: typing.Union[None, float, UnsetType] = ..., pool_timeout: typing.Union[None, float, UnsetType] = ...) -> None:
        ...
    
    def as_dict(self) -> typing.Dict[str, typing.Optional[float]]:
        ...
    
    def __eq__(self, other: typing.Any) -> bool:
        ...
    
    def __repr__(self) -> str:
        ...
    


class Limits:
    """
    Configuration for limits to various client behaviors.

    **Parameters:**

    * **max_connections** - The maximum number of concurrent connections that may be
            established.
    * **max_keepalive_connections** - Allow the connection pool to maintain
            keep-alive connections below this point. Should be less than or equal
            to `max_connections`.
    """
    def __init__(self, *, max_connections: int = ..., max_keepalive_connections: int = ..., max_keepalive: int = ...) -> None:
        ...
    
    def __eq__(self, other: typing.Any) -> bool:
        ...
    
    def __repr__(self) -> str:
        ...
    


class PoolLimits(Limits):
    def __init__(self, **kwargs: typing.Any) -> None:
        ...
    


class Proxy:
    def __init__(self, url: URLTypes, *, headers: HeaderTypes = ..., mode: str = ...) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    


DEFAULT_TIMEOUT_CONFIG = Timeout(timeout=5)
DEFAULT_LIMITS = Limits(max_connections=100, max_keepalive_connections=20)
DEFAULT_MAX_REDIRECTS = 20
